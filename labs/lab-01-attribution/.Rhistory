coalition_mat = shap_vals
shap_vals[2^number_of_channels,] = Shapley_value(touch_combo_conv_rate$conv_rate, game="profit")
for(i in 2:(2^number_of_channels-1)){
if(sum(coalition_mat[i,]) == 1){
shap_vals[i,which(shap_vals[i,]==1)] = touch_combo_conv_rate[i,"conv_rate"]
}else if(sum(coalition_mat[i,]) > 1){
if(sum(coalition_mat[i,]) < number_of_channels){
channels_of_interest = which(coalition_mat[i,] == 1)
char_func = data.frame(rates = touch_combo_conv_rate[1,"conv_rate"])
for(j in 2:i){
if(sum(coalition_mat[j,channels_of_interest])>0 &
sum(coalition_mat[j,-channels_of_interest])==0)
char_func = rbind(char_func,touch_combo_conv_rate[j,"conv_rate"])
}
shap_vals[i,channels_of_interest] =
Shapley_value(char_func$rates, game="profit")
}
}
}
View(shap_vals)
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(mid_campaign = row.names(shapley_value_orders),
orders = as.numeric(shapley_value_orders))
View(shapley_value_orders)
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
orders = as.numeric(shapley_value_orders))
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
orders = as.numeric(shapley_value_orders))
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
conversions = as.numeric(shapley_value_orders))
shapley_attribtuion <- function(df){
df <-
df %>%
group_by(cookie) %>%
# data are arranged in time so skipping this step
# arrange(hit_time_gmt) %>%
mutate(order_seq = ifelse(conversion > 0, 1, NA)) %>%
mutate(order_seq = lag(cumsum(ifelse(is.na(order_seq), 0, order_seq)))) %>%
mutate(order_seq = ifelse((row_number() == 1) & (conversion > 0),
-1, ifelse(row_number() == 1, 0, order_seq))) %>%
ungroup()
seq_summaries <-
test_df %>%
group_by(cookie, order_seq) %>%
summarize(
facebook_touches = max(ifelse(channel == "Facebook",1,0)),
instagram_touches = max(ifelse(channel == "Instagram",1,0)),
display_touches = max(ifelse(channel == "Online Display",1,0)),
video_touches = max(ifelse(channel == "Online Video",1,0)),
paid_search_touches = max(ifelse(channel == "Paid Search",1,0)),
conversions = sum(conversion)
) %>% ungroup()
# Sum up the number of sequences and conversions
# for each combination of marketing channels
conv_rates = seq_summaries %>%
group_by(facebook_touches,
instagram_touches,
display_touches,
paid_search_touches,
video_touches ) %>%
summarize(
conversions = sum(conversions),
total_sequences = n()
)
# number of marketing channels
number_of_channels <- 5
# The coalitions function is a handy function from the GameTheoryALlocation
# library that creates a binary matrix to which you can fit your
# characteristic function (more on this in a bit)
touch_combos <- as.data.frame(coalitions(number_of_channels)$Binary)
names(touch_combos) <- c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
# Now I'll join my previous summary results with the binary matrix
# the GameTheoryAllocation library built for me.
touch_combo_conv_rate = left_join(touch_combos, conv_rates,
by = c(
"Facebook"="facebook_touches",
"Instagram" = "instagram_touches",
"Online Display" = "display_touches",
"Paid Search" = "paid_search_touches",
"Online Video" = "video_touches"
)
)
# Finally, I'll fill in any NAs with 0
touch_combo_conv_rate = touch_combo_conv_rate %>%
mutate_all(funs(ifelse(is.na(.),0,.))) %>%
mutate(
conv_rate = ifelse(total_sequences > 0, conversions/total_sequences, 0)
)
# Building Shapley Values for each channel combination
shap_vals = as.data.frame(coalitions(number_of_channels)$Binary)
names(shap_vals) = c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
coalition_mat = shap_vals
shap_vals[2^number_of_channels,] = Shapley_value(touch_combo_conv_rate$conv_rate, game="profit")
for(i in 2:(2^number_of_channels-1)){
if(sum(coalition_mat[i,]) == 1){
shap_vals[i,which(shap_vals[i,]==1)] = touch_combo_conv_rate[i,"conv_rate"]
}else if(sum(coalition_mat[i,]) > 1){
if(sum(coalition_mat[i,]) < number_of_channels){
channels_of_interest = which(coalition_mat[i,] == 1)
char_func = data.frame(rates = touch_combo_conv_rate[1,"conv_rate"])
for(j in 2:i){
if(sum(coalition_mat[j,channels_of_interest])>0 &
sum(coalition_mat[j,-channels_of_interest])==0)
char_func = rbind(char_func,touch_combo_conv_rate[j,"conv_rate"])
}
shap_vals[i,channels_of_interest] =
Shapley_value(char_func$rates, game="profit")
}
}
}
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
conversions = as.numeric(shapley_value_orders))
return(shapley_value_orders)
}
shapley_attribtuion <- function(df){
df <-
df %>%
group_by(cookie) %>%
# data are arranged in time so skipping this step
# arrange(hit_time_gmt) %>%
mutate(order_seq = ifelse(conversion > 0, 1, NA)) %>%
mutate(order_seq = lag(cumsum(ifelse(is.na(order_seq), 0, order_seq)))) %>%
mutate(order_seq = ifelse((row_number() == 1) & (conversion > 0),
-1, ifelse(row_number() == 1, 0, order_seq))) %>%
ungroup()
seq_summaries <-
test_df %>%
group_by(cookie, order_seq) %>%
summarize(
facebook_touches = max(ifelse(channel == "Facebook",1,0)),
instagram_touches = max(ifelse(channel == "Instagram",1,0)),
display_touches = max(ifelse(channel == "Online Display",1,0)),
video_touches = max(ifelse(channel == "Online Video",1,0)),
paid_search_touches = max(ifelse(channel == "Paid Search",1,0)),
conversions = sum(conversion)
) %>% ungroup()
# Sum up the number of sequences and conversions
# for each combination of marketing channels
conv_rates = seq_summaries %>%
group_by(facebook_touches,
instagram_touches,
display_touches,
paid_search_touches,
video_touches ) %>%
summarize(
conversions = sum(conversions),
total_sequences = n()
)
# number of marketing channels
number_of_channels <- 5
# The coalitions function is a handy function from the GameTheoryALlocation
# library that creates a binary matrix to which you can fit your
# characteristic function (more on this in a bit)
touch_combos <- as.data.frame(coalitions(number_of_channels)$Binary)
names(touch_combos) <- c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
# Now I'll join my previous summary results with the binary matrix
# the GameTheoryAllocation library built for me.
touch_combo_conv_rate = left_join(touch_combos, conv_rates,
by = c(
"Facebook"="facebook_touches",
"Instagram" = "instagram_touches",
"Online Display" = "display_touches",
"Paid Search" = "paid_search_touches",
"Online Video" = "video_touches"
)
)
# Finally, I'll fill in any NAs with 0
touch_combo_conv_rate = touch_combo_conv_rate %>%
mutate_all(funs(ifelse(is.na(.),0,.))) %>%
mutate(
conv_rate = ifelse(total_sequences > 0, conversions/total_sequences, 0)
)
# Building Shapley Values for each channel combination
shap_vals = as.data.frame(coalitions(number_of_channels)$Binary)
names(shap_vals) = c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
coalition_mat = shap_vals
shap_vals[2^number_of_channels,] = Shapley_value(touch_combo_conv_rate$conv_rate, game="profit")
for(i in 2:(2^number_of_channels-1)){
if(sum(coalition_mat[i,]) == 1){
shap_vals[i,which(shap_vals[i,]==1)] = touch_combo_conv_rate[i,"conv_rate"]
}else if(sum(coalition_mat[i,]) > 1){
if(sum(coalition_mat[i,]) < number_of_channels){
channels_of_interest = which(coalition_mat[i,] == 1)
char_func = data.frame(rates = touch_combo_conv_rate[1,"conv_rate"])
for(j in 2:i){
if(sum(coalition_mat[j,channels_of_interest])>0 &
sum(coalition_mat[j,-channels_of_interest])==0)
char_func = rbind(char_func,touch_combo_conv_rate[j,"conv_rate"])
}
shap_vals[i,channels_of_interest] =
Shapley_value(char_func$rates, game="profit")
}
}
}
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
conversions = as.numeric(shapley_value_orders))
return(shapley_value_orders)
}
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-01-01"), as.Date(" and 2018-01-07")))
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-01-01"), as.Date(" and 2018-07-01")))
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2018-07-01")))
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2018-01-07")))
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-01-01"), as.Date("2018-07-01")))
View(df)
View(df)
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-07-01"), as.Date("2018-07-07")))
# Task 11.
# HINT:
# - Insert the start and end dates of the week. Needs quotations around the dates.
one_week <-
df %>%
filter(between(date, as.Date("2018-07-01"), as.Date("2018-07-07")))
View(one_week)
shapley_attribution <- function(df){
df <-
df %>%
group_by(cookie) %>%
# data are arranged in time so skipping this step
# arrange(hit_time_gmt) %>%
mutate(order_seq = ifelse(conversion > 0, 1, NA)) %>%
mutate(order_seq = lag(cumsum(ifelse(is.na(order_seq), 0, order_seq)))) %>%
mutate(order_seq = ifelse((row_number() == 1) & (conversion > 0),
-1, ifelse(row_number() == 1, 0, order_seq))) %>%
ungroup()
seq_summaries <-
test_df %>%
group_by(cookie, order_seq) %>%
summarize(
facebook_touches = max(ifelse(channel == "Facebook",1,0)),
instagram_touches = max(ifelse(channel == "Instagram",1,0)),
display_touches = max(ifelse(channel == "Online Display",1,0)),
video_touches = max(ifelse(channel == "Online Video",1,0)),
paid_search_touches = max(ifelse(channel == "Paid Search",1,0)),
conversions = sum(conversion)
) %>% ungroup()
# Sum up the number of sequences and conversions
# for each combination of marketing channels
conv_rates = seq_summaries %>%
group_by(facebook_touches,
instagram_touches,
display_touches,
paid_search_touches,
video_touches ) %>%
summarize(
conversions = sum(conversions),
total_sequences = n()
)
# number of marketing channels
number_of_channels <- 5
# The coalitions function is a handy function from the GameTheoryALlocation
# library that creates a binary matrix to which you can fit your
# characteristic function (more on this in a bit)
touch_combos <- as.data.frame(coalitions(number_of_channels)$Binary)
names(touch_combos) <- c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
# Now I'll join my previous summary results with the binary matrix
# the GameTheoryAllocation library built for me.
touch_combo_conv_rate = left_join(touch_combos, conv_rates,
by = c(
"Facebook"="facebook_touches",
"Instagram" = "instagram_touches",
"Online Display" = "display_touches",
"Paid Search" = "paid_search_touches",
"Online Video" = "video_touches"
)
)
# Finally, I'll fill in any NAs with 0
touch_combo_conv_rate = touch_combo_conv_rate %>%
mutate_all(funs(ifelse(is.na(.),0,.))) %>%
mutate(
conv_rate = ifelse(total_sequences > 0, conversions/total_sequences, 0)
)
# Building Shapley Values for each channel combination
shap_vals = as.data.frame(coalitions(number_of_channels)$Binary)
names(shap_vals) = c("Facebook","Instagram","Online Display",
"Online Video","Paid Search")
coalition_mat = shap_vals
shap_vals[2^number_of_channels,] = Shapley_value(touch_combo_conv_rate$conv_rate, game="profit")
for(i in 2:(2^number_of_channels-1)){
if(sum(coalition_mat[i,]) == 1){
shap_vals[i,which(shap_vals[i,]==1)] = touch_combo_conv_rate[i,"conv_rate"]
}else if(sum(coalition_mat[i,]) > 1){
if(sum(coalition_mat[i,]) < number_of_channels){
channels_of_interest = which(coalition_mat[i,] == 1)
char_func = data.frame(rates = touch_combo_conv_rate[1,"conv_rate"])
for(j in 2:i){
if(sum(coalition_mat[j,channels_of_interest])>0 &
sum(coalition_mat[j,-channels_of_interest])==0)
char_func = rbind(char_func,touch_combo_conv_rate[j,"conv_rate"])
}
shap_vals[i,channels_of_interest] =
Shapley_value(char_func$rates, game="profit")
}
}
}
# Apply Shapley Values as attribution weighting
order_distribution = shap_vals * touch_combo_conv_rate$total_sequences
shapley_value_orders = t(t(round(colSums(order_distribution))))
shapley_value_orders = data.frame(channel = row.names(shapley_value_orders),
conversions = as.numeric(shapley_value_orders))
return(shapley_value_orders)
}
shapley_attribution(one_week)
library(ChannelAttribution)
# --- PART E: More Touch Attribution Models --- #
# Task 20
# Convert data structure to what ChannelAttribution package needs
paths_data <-
df %>%
group_by(cookie) %>%
mutate(path = paste(channel, collapse = " > ")) %>%
mutate(converted = max(conversion)) %>%
ungroup() %>%
group_by(cookie, path) %>%
summarize(conversion_value = sum(conversion_value),
converted = min(converted)
) %>%
ungroup()
# Task 21
# Estimate heuristic models with the 'ChannelAttribution' package
heuristic_models <-
heuristic_models(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">")
print(heuristic_models)
shapley_conversions <- shapley_attribution(one_week)
shapley_conversions
print(heuristic_models)
# Task 22
# Markov Model
markov_model <-
markov_model(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">",
order = 1,
seed = 1234567890
)
print(markov_model)
shapley_conversions
?t()
# this may take a min or two to run
source(compute_shapley_values)
# this may take a min or two to run
source("compute_shapley_values.R")
# this may take a min or two to run
shapley_conversions <- shapley_attribution(one_week)
shapley_conversions
library(readr)                # loading data
library(dplyr)                # manipulating data
library(ggplot2)              # plotting figures
library(ChannelAttribution)   # attribution modelling package
library(GameTheoryAllocation) # for shapley values
# A
# Solution:
df <- read_csv("data/attribution_data_student.csv")
# B
# Solution:
df %>%
nrow()
# --- Task 3: Selecting Data for Analysis --- #
# A.
# HINT:
# - Adapt your answer from the tasks above
conversions <-
df %>%
filter(conversion == 1)
# B
# Estimate heuristic models with the 'ChannelAttribution' package
heuristic_models <-
heuristic_models(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">")
# --- Task 5: Using a Package--- #
# A
# Convert data structure to what ChannelAttribution package needs
paths_data <-
df %>%
group_by(cookie) %>%
mutate(path = paste(channel, collapse = " > ")) %>%
mutate(converted = max(conversion)) %>%
ungroup() %>%
group_by(cookie, path) %>%
summarize(conversion_value = sum(conversion_value),
converted = min(converted)
) %>%
ungroup()
# B
# Estimate heuristic models with the 'ChannelAttribution' package
heuristic_models <-
heuristic_models(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">")
View(heuristic_models)
# --- Task 5: Using a Package--- #
# A
# Convert data structure to what ChannelAttribution package needs
paths_data <-
df %>%
filter(conversion == 1)
# --- Task 5: Using a Package--- #
# A
# Convert data structure to what ChannelAttribution package needs
paths_data <-
df %>%
filter(conversion == 1) %>%
group_by(cookie) %>%
mutate(path = paste(channel, collapse = " > ")) %>%
mutate(converted = max(conversion)) %>%
ungroup() %>%
group_by(cookie, path) %>%
summarize(conversion_value = sum(conversion_value),
converted = min(converted)
) %>%
ungroup()
# B
# Estimate heuristic models with the 'ChannelAttribution' package
heuristic_models2 <-
heuristic_models(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">")
View(heuristic_models2)
# C
# Markov Model
markov_model <-
markov_model(
paths_data,
var_path = "path",
var_conv = "converted",
var_value = "conversion_value",
sep = ">",
order = 1,
seed = 1234567890
)
print(markov_model)
print(heuristic_models)
# --- Task 6: Shapley Values --- #
source("compute_shapley_values.R")
# this may take a min or two to run
# ignore any text printed to screen
shapley_conversions <- shapley_attribution(df)
# --- Task 6: Shapley Values --- #
source("compute_shapley_values.R")
# --- Task 6: Shapley Values --- #
source("compute_shapley_values.R")
# this may take a min or two to run
# ignore any text printed to screen
shapley_conversions <- shapley_attribution(df)
print(shapley_conversions)
?Shapley_value
